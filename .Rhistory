# 获取文件夹内所有CSV文件的路径
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# 初始化一个空数据框，用于存储所有文件的统计结果
all_results <- data.frame()
# 遍历每个CSV文件
for (file in csv_files) {
# 读取CSV文件
data <- read.csv(file, row.names = 1)
# 确保列名一致，并检查是否存在NPS列
if ("NPS" %in% colnames(data)) {
# 按NPS列进行统计
counts <- data %>%
group_by(NPS) %>%
summarise(count = n()) %>%
mutate(relative = count / sum(count))
# 添加文件名信息
counts$file <- basename(file)
# 合并结果
all_results <- bind_rows(all_results, counts)
} else {
message(paste("文件", basename(file), "中不包含NPS列"))
}
}
# 如果需要，将结果写入到CSV文件
write.csv(all_results, "NPS_summary.csv", row.names = FALSE)
# 创建堆叠柱状图
p_bar <- ggplot(all_results, aes(x = file, y = relative, fill = NPS)) +
geom_bar(stat = "identity") +  # 堆叠柱状图
labs(
title = "NPS",
x = "sample",
y = "relative",
fill = "NPS type"
) +
scale_fill_manual(values = colour) +  # 使用自定义配色
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # 横坐标标签倾斜
)
colour <- c("#767676", "#c7e0b9", "#b1bff0", "#f7df89")
# 创建堆叠柱状图
p_bar <- ggplot(all_results, aes(x = file, y = relative, fill = NPS)) +
geom_bar(stat = "identity") +  # 堆叠柱状图
labs(
title = "NPS",
x = "sample",
y = "relative",
fill = "NPS type"
) +
scale_fill_manual(values = colour) +  # 使用自定义配色
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # 横坐标标签倾斜
)
# 添加主题和边框样式
endbar <- p_bar +
theme_prism(border = TRUE) +
coord_cartesian(clip = "off") +
theme(
text = element_text(family = "serif"),
legend.position = "right",
panel.border = element_rect(color = "black", fill = NA, size = 1.0) # 调整边框大小
)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggprism)
# 创建堆叠柱状图
p_bar <- ggplot(all_results, aes(x = file, y = relative, fill = NPS)) +
geom_bar(stat = "identity") +  # 堆叠柱状图
labs(
title = "NPS",
x = "sample",
y = "relative",
fill = "NPS type"
) +
scale_fill_manual(values = colour) +  # 使用自定义配色
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1)  # 横坐标标签倾斜
)
# 添加主题和边框样式
endbar <- p_bar +
theme_prism(border = TRUE) +
coord_cartesian(clip = "off") +
theme(
text = element_text(family = "serif"),
legend.position = "right",
panel.border = element_rect(color = "black", fill = NA, size = 1.0) # 调整边框大小
)
# 显示图形
endbar
# 安装必要的包
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
# 加载包
library(ggtree)
library(tidytree)
library(tidyverse)
# 示例分类数据
taxonomy <- tibble::tibble(
Kingdom = c("Bacteria", "Bacteria"),
Phylum = c("Proteobacteria", "Firmicutes"),
Class = c("Gammaproteobacteria", "Bacilli"),
Order = c("Enterobacterales", "Bacillales"),
Family = c("Enterobacteriaceae", "Bacillaceae"),
Genus = c("Escherichia", "Bacillus")
)
# 将分类数据转换为树状结构
taxonomy_long <- taxonomy %>%
pivot_longer(cols = everything(), names_to = "Rank", values_to = "Taxon") %>%
group_by(Taxon) %>%
summarise(Parent = lag(Taxon, default = NA)) %>%
filter(!is.na(Parent))
tree <- as.phylo(as_tibble(taxonomy_long))
# 可视化分类树
ggtree(tree) +
geom_tiplab() +
theme_tree2()
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(reshape2)
library(ggnewscale)
library(ggplot2)
library(ggplot2)
library(Rmisc)
library(ggsci)
# library(tidyverse)
library(ggpubr)
library(ggthemes)
library(ggplot2)
library(ggprism)
library(Rmisc)
library(car)
library(agricolae)
library(lsmeans)
library(multcompView)
library(multcomp)
library(ggprism)
# library(tidyverse)
library(patchwork)
# 设定文件夹路径
folder_path <- "E:/others_data/data152"
# 获取所有 CSV 文件路径
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# 读取并合并数据
data_list <- lapply(csv_files, function(file) {
df <- read_csv(file) %>%
select(NPS) %>%
mutate(File = basename(file)) # 添加文件名列
return(df)
})
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
# 设定文件夹路径
folder_path <- "E:/others_data/data152"
# 获取所有 CSV 文件路径
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# 读取并合并数据
data_list <- lapply(csv_files, function(file) {
df <- read_csv(file) %>%
select(Category) %>%
mutate(File = basename(file)) # 添加文件名列
return(df)
})
data_all <- bind_rows(data_list)
# 统计 Category 分类数量并计算百分比
data_summary <- data_all %>%
group_by(File, Category) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(File) %>%
mutate(Percentage = Count / sum(Count) * 100)
# 画 100% 堆叠柱状图
p1=ggplot(data_summary, aes(x = File, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "Sample Name", y = "Relative concentration", fill = "Category") +
theme_minimal()+theme_prism(border = TRUE) + coord_cartesian(clip = "off")
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(reshape2)
library(ggnewscale)
library(ggplot2)
library(ggplot2)
library(Rmisc)
library(ggsci)
# library(tidyverse)
library(ggpubr)
library(ggthemes)
library(ggplot2)
library(ggprism)
library(Rmisc)
# library(car)
library(agricolae)
library(lsmeans)
library(multcompView)
library(multcomp)
library(ggprism)
# library(tidyverse)
library(patchwork)
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
# 设定文件夹路径
folder_path <- "E:/others_data/data152"
# 获取所有 CSV 文件路径
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# 读取并合并数据
data_list <- lapply(csv_files, function(file) {
df <- read_csv(file) %>%
select(Category) %>%
mutate(File = basename(file)) # 添加文件名列
return(df)
})
p1 = ggplot(data_summary, aes(x = File, y = Percentage, fill = NPS)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "Sample Name", y = "Relative concentration", fill = "NPS") +
theme_minimal()+theme_prism(border = TRUE) + coord_cartesian(clip = "off")
p1
p1=ggplot(data_summary, aes(x = File, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "Sample Name", y = "Relative concentration", fill = "Category") +
theme_minimal()+theme_prism(border = TRUE) + coord_cartesian(clip = "off")
p1
write.csv(data_summary,"data_summary.csv")
getwd()
data_summary <- read.csv("data_summary.csv")  # 第一个CSV文件
# 画 100% 堆叠柱状图
p1=ggplot(data_summary, aes(x = File, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "Sample Name", y = "Relative concentration", fill = "Category") +
theme_minimal()+theme_prism(border = TRUE) + coord_cartesian(clip = "off")
p1
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
# 设定文件夹路径
# 设置你的 CSV 文件夹路径
folder_path <- "E:/others_data/data155/DON处理/DON处理/原始数据/25021714198/result/csv/group"  # 替换为你的文件夹路径
# 获取所有 CSV 文件路径
file_list <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# 读取所有 CSV 并计算 Category 频数
data_list <- lapply(file_list, function(file) {
df <- read_csv(file)  # 读取 CSV
category_count <- df %>%
count(Category) %>%  # 计算每个 Category 的频数
mutate(Sample = basename(file))  # 添加样本名（文件名）
return(category_count)
})
# 合并所有样本的数据
combined_data <- bind_rows(data_list)
# 查看处理后的数据
print(combined_data)
combined_data
# 获取所有 CSV 文件路径
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# 读取并合并数据
data_list <- lapply(csv_files, function(file) {
df <- read_csv(file) %>%
select(Category) %>%
mutate(File = basename(file)) # 添加文件名列
return(df)
})
data_all <- bind_rows(data_list)
# 统计 Category 分类数量并计算百分比
data_summary <- data_all %>%
group_by(File, Category) %>%
summarise(Count = n(), .groups = 'drop') %>%
group_by(File) %>%
mutate(Percentage = Count / sum(Count) * 100)
# 画 100% 堆叠柱状图
p1=ggplot(data_summary, aes(x = File, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "Sample Name", y = "Relative concentration", fill = "Category") +
theme_minimal()+theme_prism(border = TRUE) + coord_cartesian(clip = "off")
library(ggplot2)
library(dplyr)
library(tidyr)
library(readr)
library(reshape2)
library(ggnewscale)
library(ggplot2)
library(ggplot2)
library(Rmisc)
library(ggsci)
# library(tidyverse)
library(ggpubr)
library(ggthemes)
library(ggplot2)
library(ggprism)
library(Rmisc)
# library(car)
library(agricolae)
library(lsmeans)
library(multcompView)
library(multcomp)
library(ggprism)
# library(tidyverse)
library(patchwork)
# 画 100% 堆叠柱状图
p1=ggplot(data_summary, aes(x = File, y = Percentage, fill = Category)) +
geom_bar(stat = "identity", position = "fill") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "Sample Name", y = "Relative concentration", fill = "Category") +
theme_minimal()+theme_prism(border = TRUE) + coord_cartesian(clip = "off")
怕
p1
# 设定文件夹路径
# 设置你的 CSV 文件夹路径
folder_path <- "E:/others_data/data155/DON处理/DON处理/原始数据/25021714198/result/csv/group"  # 替换为你的文件夹路径
# 获取所有 CSV 文件路径
csv_files <- list.files(folder_path, pattern = "\\.csv$", full.names = TRUE)
# 读取并合并数据
data_list <- lapply(csv_files, function(file) {
df <- read_csv(file) %>%
select(Category) %>%
mutate(File = basename(file)) # 添加文件名列
return(df)
})
# 加载必要的包
library(ggplot2)
library(dplyr)
library(readr)
library(tidyr)
# 设置路径
folder_path <- "E:/others_data/data184/data/plot"
# 读取数据
file1 <- file.path(folder_path, "MS_MolInfor9.csv")
file2 <- file.path(folder_path, "MS_MolInfor10.csv")
df1 <- read_csv(file1)
df2 <- read_csv(file2)
# 添加样本名标签
df1$Sample <- "MS_MolInfor9"
df2$Sample <- "MS_MolInfor10"
# 合并数据
data_all <- bind_rows(df1, df2)
# 保留有效 DBE（非缺失，且 DBE <= 20），并向下取整为整数
data_all <- data_all %>%
filter(!is.na(DBE), DBE <= 20) %>%
mutate(DBE_int = floor(DBE))  # 使用整数形式的DBE
# 统计每个样本每个DBE值的数量
summary_df <- data_all %>%
group_by(Sample, DBE_int) %>%
summarise(Count = n(), .groups = "drop")
# 计算每个样本中每类DBE所占百分比
summary_df <- summary_df %>%
group_by(Sample) %>%
mutate(Relative = Count / sum(Count) * 100)
# 将 DBE 值转换为因子以保持顺序
summary_df$DBE_int <- factor(summary_df$DBE_int, levels = 0:20)
# 定义颜色向量，按照图中颜色顺序近似设置
colors <- c("#d0cee6", "#f3c59f", "#c0fabc", "#fdfeac", "#d1e5c7", "#e8a4ac",
"#eec4d8", "#8ed9f9", "#c0e4f7", "#8c7f22", "#8b8020", "#a19223",
"#2a3050", "#3d417a", "#794013", "#8d561d", "#26502c", "#537233",
"#6b1820", "#8f2754", "#184f65")
# 保存为 PDF
ggplot(summary_df, aes(x = Sample, y = Relative, fill = DBE_int)) +
geom_bar(stat = "identity") +
scale_fill_manual(values = colors) +
labs(title = "DBE 0–20 相对数量堆叠柱状图",
x = "样本",
y = "相对百分比 (%)",
fill = "DBE") +
theme_minimal(base_size = 14)
# 确保有氧原子数量字段（你可以根据实际列名修改）
# 假设列名是 O，即含氧原子数
data_all <- data_all %>%
mutate(O_class = case_when(
O == 1 ~ "O1",
O == 2 ~ "O2",
O == 3 ~ "O3",
O == 4 ~ "O4",
O == 5 ~ "O5",
TRUE ~ "Other"
))
# 仅保留 O1 到 O5
oxygen_df <- data_all %>%
filter(O_class %in% c("O1", "O2", "O3", "O4", "O5")) %>%
group_by(Sample, O_class) %>%
summarise(Count = n(), .groups = "drop")
# 保存为 PDF
ggplot(oxygen_df, aes(x = Sample, y = Count, fill = O_class)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "O1–O5 含氧分子数量统计图",
x = "样本",
y = "分子数量",
fill = "氧原子数") +
theme_minimal(base_size = 14)
# Filter and group by oxygen classes O1 to O5
oxygen_df <- data_all %>%
filter(O_class %in% c("O1", "O2", "O3", "O4", "O5")) %>%
group_by(O_class, Sample) %>%
summarise(Count = dplyr::n(), .groups = "drop")
# Plot: X axis is O_class, fill/group is Sample
library(ggplot2)
ggplot(oxygen_df, aes(x = O_class, y = Count, fill = Sample)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Counts of Oxygen-containing Molecules (O1–O5)",
x = "Oxygen Class",
y = "Molecule Count",
fill = "Sample") +
theme_minimal(base_size = 14)
# Step 1: Filter O_class and calculate count
oxygen_df <- data_all %>%
filter(O_class %in% c("O1", "O2", "O3", "O4", "O5")) %>%
group_by(Sample, O_class) %>%
summarise(Count = dplyr::n(), .groups = "drop")
# Step 2: Calculate total per sample
total_df <- oxygen_df %>%
group_by(Sample) %>%
summarise(Total = sum(Count))
# Step 3: Merge and calculate relative abundance
oxygen_df <- oxygen_df %>%
left_join(total_df, by = "Sample") %>%
mutate(Relative_Abundance = Count / Total)
# Step 4: Plot relative abundance
library(ggplot2)
ggplot(oxygen_df, aes(x = O_class, y = Relative_Abundance, fill = Sample)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Relative Abundance of Oxygen-containing Molecules (O1–O5)",
x = "Oxygen Class",
y = "Relative Abundance",
fill = "Sample") +
theme_minimal(base_size = 14)
library(dplyr)
library(ggplot2)
# Step 1: 筛选 O_class 并统计每类强度总和
oxygen_intensity <- data_all %>%
filter(O_class %in% c("O1", "O2", "O3", "O4", "O5")) %>%
group_by(Sample, O_class) %>%
summarise(Intensity_Sum = sum(Intensity, na.rm = TRUE), .groups = "drop")
# Step 2: 计算每个 Sample 的总强度
total_intensity <- oxygen_intensity %>%
group_by(Sample) %>%
summarise(Total_Intensity = sum(Intensity_Sum), .groups = "drop")
# Step 3: 合并并计算相对强度
oxygen_intensity <- oxygen_intensity %>%
left_join(total_intensity, by = "Sample") %>%
mutate(Relative_Intensity = Intensity_Sum / Total_Intensity)
# Step 4: 绘图（Relative_Intensity）
ggplot(oxygen_intensity, aes(x = O_class, y = Relative_Intensity, fill = Sample)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Relative Intensity of Oxygen-containing Molecules (O1–O5)",
x = "Oxygen Class",
y = "Relative Intensity",
fill = "Sample") +
theme_minimal(base_size = 14)
# Step 1: Filter O_class and calculate count
oxygen_df <- data_all %>%
filter(O_class %in% c("O1", "O2", "O3", "O4", "O5")) %>%
group_by(Sample, O_class) %>%
summarise(Count = dplyr::n(), .groups = "drop")
# Step 2: Calculate total per sample
total_df <- oxygen_df %>%
group_by(Sample) %>%
summarise(Total = sum(Count))
# Step 3: Merge and calculate relative abundance
oxygen_df <- oxygen_df %>%
left_join(total_df, by = "Sample") %>%
mutate(Relative_Abundance = Count / Total)
# Step 4: Plot relative abundance
library(ggplot2)
ggplot(oxygen_df, aes(x = O_class, y = Relative_Abundance, fill = Sample)) +
geom_bar(stat = "identity", position = position_dodge()) +
labs(title = "Relative Abundance of Oxygen-containing Molecules (O1–O5)",
x = "Oxygen Class",
y = "Relative Abundance",
fill = "Sample") +
theme_minimal(base_size = 14)
remove.packages("ubynet")
# 进入包项目目录
setwd("E:/others_data/code/publish/ubynet")
# 清除旧的 NAMESPACE 文件（如果存在）
if (file.exists("NAMESPACE")) file.remove("NAMESPACE")
# 重新生成文档
devtools::document()
devtools::install("E:/others_data/code/publish/ubynet")
setwd("E:/others_data/code/publish/test")
library(dplyr)
library(readr)
library(ubynet)
# 运行函数（替换为你自己的路径）
reaction_network_from_intensity(
molfile1 = "MS_MolInfor1.csv",
molfile2 = "MS_MolInfor2.csv",
deltafile = "reaction_delta.csv",
output_dir = "output"
)
setwd("E:/others_data/code/publish/ubynet")
devtools::document()
devtools::install("E:/others_data/code/publish/ubynet", force = TRUE)
library(ubynet)
# 再次运行函数
reaction_network_from_intensity(
molfile1 = "MS_MolInfor1.csv",
molfile2 = "MS_MolInfor2.csv",
deltafile = "reaction_delta.csv",
output_dir = "output"
)
